package com.example.kotlincontentprovider

import android.database.Cursor
import android.net.Uri
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.provider.BaseColumns._ID
import android.util.Log
import androidx.loader.app.LoaderManager
import androidx.loader.content.CursorLoader
import androidx.loader.content.Loader
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.kotlincontentprovider.database.NoteProvider.Companion.URI_NOTES
import com.example.kotlincontentprovider.database.NotesDataBaseHelper.Companion.COLUMNS_TITULO
import com.google.android.material.floatingactionbutton.FloatingActionButton

class MainActivity : AppCompatActivity(), LoaderManager.LoaderCallbacks<Cursor> {

    lateinit var noteRecyclerView: RecyclerView
    lateinit var noteAdd:FloatingActionButton
    lateinit var notesAdapter: NotesAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        noteAdd=findViewById(R.id.note_add)
        noteAdd.setOnClickListener{
            NotesDetailFragment().show(supportFragmentManager,"dialog")
        }

        notesAdapter= NotesAdapter(object :NoteClickListener{
            override fun noteClickItem(cursor: Cursor) {
                val id=cursor.getLong(cursor.getColumnIndex(_ID) as Int)
                val fragment=NotesDetailFragment.newInstance(id)
                fragment.show(supportFragmentManager,"dialog" )
            }

            override fun noteRemoveItem(cursor: Cursor?) {
                val id=cursor?.getLong(cursor?.getColumnIndex(_ID)as Int)
                contentResolver.delete(Uri.withAppendedPath(URI_NOTES,id.toString()),null,null)
            }

        })
        notesAdapter.setHasStableIds(true)
        noteRecyclerView=findViewById(R.id.notes_recycler)
        noteRecyclerView.adapter=notesAdapter
        noteRecyclerView.layoutManager=LinearLayoutManager(this)

        LoaderManager.getInstance(this).initLoader(0,null,this)
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     * This will always be called from the process's main thread.
     * @param id The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     * instancia a busca
     */
    override fun onCreateLoader(id: Int, args: Bundle?): Loader<Cursor> {
        return CursorLoader(this,URI_NOTES,null,null,null,COLUMNS_TITULO)
    }

    /**
     * Called when a previously created loader has finished its load.  Note
     * that normally an application is *not* allowed to commit fragment
     * transactions while in this call, since it can happen after an
     * activity's state is saved.  See [ FragmentManager.openTransaction()][androidx.fragment.app.FragmentManager.beginTransaction] for further discussion on this.
     ***
     * This function is guaranteed to be called prior to the release of
     * the last data that was supplied for this Loader.  At this point
     * you should remove all use of the old data (since it will be released
     * soon), but should not do your own release of the data since its Loader
     * owns it and will take care of that.  The Loader will take care of
     * management of its data so you don't have to.  In particular:
     ***
     *The Loader will monitor for changes to the data, and report
     * them to you through new calls here.  You should not monitor the
     * data yourself.  For example, if the data is a [android.database.Cursor]
     * and you place it in a [android.widget.CursorAdapter], use
     * the [android.widget.CursorAdapter.CursorAdapter] constructor *without* passing
     * in either [android.widget.CursorAdapter.FLAG_AUTO_REQUERY]
     * or [android.widget.CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER]
     * (that is, use 0 for the flags argument).  This prevents the CursorAdapter
     * from doing its own observing of the Cursor, which is not needed since
     * when a change happens you will get a new Cursor throw another call
     * here.
     *  *  The Loader will release the data once it knows the application
     * is no longer using it.  For example, if the data is
     * a [android.database.Cursor] from a [android.content.CursorLoader],
     * you should not call close() on it yourself.  If the Cursor is being placed in a
     * [android.widget.CursorAdapter], you should use the
     * [android.widget.CursorAdapter.swapCursor]
     * method so that the old Cursor is not closed.
     **
     * This will always be called from the process's main thread.
     * **
     * pegar os dados e manipular
     **
     * @param loader The Loader that has finished.
     * @param data The data generated by the Loader.
     */
    override fun onLoadFinished(loader: Loader<Cursor>, data: Cursor?) {
        if(data !=null){
            notesAdapter.setCursor(data)
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     **
     * This will always be called from the process's main thread.
     * acabar a pesquisa em segundo plano
     **
     * @param loader The Loader that is being reset.
     */
    override fun onLoaderReset(loader: Loader<Cursor>) {
        notesAdapter.setCursor(null)
    }


}